@Configuration
@EnableWebSecurity
public class SecurityConfig {

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .csrf().disable()
            .cors().and() // Enable CORS
            .authorizeRequests()
                .requestMatchers("/api/register", "/api/login").permitAll() // Allow access to login and register endpoints
                .requestMatchers("/api/products/**", "/api/stocks/**", "/api/warehouses/**").permitAll() // Allow access to inventory endpoints
                .anyRequest().authenticated() // Secure other endpoints
            .and()
            .formLogin().disable();  // Disable default form login if you are using custom authentication mechanisms
        return http.build();
    }

    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();
        configuration.setAllowedOrigins(Arrays.asList("http://localhost:3000")); // Adjust to your frontend's domain
        configuration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE", "OPTIONS"));
        configuration.setAllowedHeaders(Arrays.asList("Authorization", "Content-Type"));
        configuration.setAllowCredentials(true); // Allow credentials if needed

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration);
        return source;
    }
}
